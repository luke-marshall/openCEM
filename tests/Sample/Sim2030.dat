# NEM ISP template scenario
set all_tech :=
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21;
# Set of generator technologies available in each zone
set gen_tech_in_zones :=
1 1
1 2
1 4
1 8
1 11
1 12
1 16
1 18
2 1
2 2
2 4
2 8
2 11
2 12
2 16
3 1
3 2
3 4
3 8
3 11
3 12
3 16
4 1
4 2
4 4
4 8
4 11
4 16
5 1
5 2
5 8
5 10
5 11
5 12
5 18
6 1
6 2
6 8
6 10
6 12
6 16
7 1
7 2
7 4
7 8
7 10
7 11
7 12
7 16
8 1
8 2
8 4
8 8
8 11
8 12
8 16
9 1
9 2
9 6
9 8
9 12
10 1
10 2
10 8
10 12
10 16
10 19
11 1
11 2
11 8
11 11
11 12
11 16
12 1
12 2
12 8
12 11
12 12
12 16
12 18
13 1
13 2
13 8
13 11
13 12
13 16
14 2
14 8
14 12
14 16
14 19
15 1
15 2
15 8
15 12
15 16
16 1
16 2
16 8
16 12
16 16
16 18
;

# Set of generator technologies that can be retired by the model
set retire_gen_tech_in_zones :=
1 2
1 4
1 8
1 16
2 2
2 4
2 8
2 16
3 2
3 4
3 8
3 16
4 2
4 4
4 8
4 16
5 2
5 8
6 2
6 8
6 16
7 2
7 4
7 8
7 16
8 2
8 4
8 8
8 16
9 2
9 6
9 8
10 2
10 8
10 16
10 19
11 2
11 8
11 16
12 2
12 8
12 16
13 2
13 8
13 16
14 2
14 8
14 16
14 19
15 2
15 8
15 16
16 2
16 8
16 16
;

# Set of emitting/fuel generator technologies
set fuel_gen_tech_in_zones :=
1 1
1 2
1 4
1 8
1 16
2 1
2 2
2 4
2 8
2 16
3 1
3 2
3 4
3 8
3 16
4 1
4 2
4 4
4 8
4 16
5 1
5 2
5 8
6 1
6 2
6 8
6 16
7 1
7 2
7 4
7 8
7 16
8 1
8 2
8 4
8 8
8 16
9 1
9 2
9 6
9 8
10 1
10 2
10 8
10 16
10 19
11 1
11 2
11 8
11 16
12 1
12 2
12 8
12 16
13 1
13 2
13 8
13 16
14 2
14 8
14 16
14 19
15 1
15 2
15 8
15 16
16 1
16 2
16 8
16 16
;

# Set of emitting/fuel generator technologies
set commit_gen_tech_in_zones :=
1 2
1 4
2 2
2 4
3 2
3 4
4 2
4 4
5 2
6 2
7 2
7 4
8 2
8 4
9 2
9 6
10 2
10 19
11 2
12 2
13 2
14 2
14 19
15 2
16 2
;


# Set of renewable energy generator technologies
set re_gen_tech_in_zones :=
1 1
1 11
1 12
1 18
2 1
2 11
2 12
3 1
3 11
3 12
4 1
4 11
5 1
5 10
5 11
5 12
5 18
6 1
6 10
6 12
7 1
7 10
7 11
7 12
8 1
8 11
8 12
9 1
9 12
10 1
10 12
11 1
11 11
11 12
12 1
12 11
12 12
12 18
13 1
13 11
13 12
14 12
15 1
15 12
16 1
16 12
16 18
;

# Set of dispatchable generators
set disp_gen_tech_in_zones :=
1 1
1 2
1 4
1 8
1 16
1 18
2 1
2 2
2 4
2 8
2 16
3 1
3 2
3 4
3 8
3 16
4 1
4 2
4 4
4 8
4 16
5 1
5 2
5 8
5 18
6 1
6 2
6 8
6 16
7 1
7 2
7 4
7 8
7 16
8 1
8 2
8 4
8 8
8 16
9 1
9 2
9 6
9 8
10 1
10 2
10 8
10 16
10 19
11 1
11 2
11 8
11 16
12 1
12 2
12 8
12 16
12 18
13 1
13 2
13 8
13 16
14 2
14 8
14 16
14 19
15 1
15 2
15 8
15 16
16 1
16 2
16 8
16 16
16 18
;

# Set of dispatchable generators
set disp_gen_tech_in_zones :=
1 1
1 18
2 1
3 1
4 1
5 1
5 18
6 1
7 1
8 1
9 1
10 1
11 1
12 1
12 18
13 1
15 1
16 1
16 18
;

#Set of storage technologies in each zones
set stor_tech_in_zones :=
1 14
1 15
2 14
2 15
3 14
3 15
5 14
5 15
5 21
6 14
6 15
7 14
7 15
8 14
8 15
9 14
9 15
10 14
10 15
11 14
11 15
12 14
12 15
13 14
13 15
15 14
15 15
16 14
16 15
;

# Set of hybrid technologies available in each zone
set hyb_tech_in_zones :=
1 13
2 13
3 13
5 13
7 13
8 13
13 13
;

#Retrieve fuel costs for defined technologies
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cap.ntndp_zone_id AS zones, cap.technology_type_id AS all_tech, avg(fuel.price) as cost_fuel
FROM fuel_price fuel
INNER JOIN capacity cap ON cap.id=fuel.capacity_id
WHERE fuel.year=2030 AND fuel.fuel_scenario_id =3
AND (cap.ntndp_zone_id,cap.technology_type_id) in
((1, 1), (1, 2), (1, 4), (1, 8), (1, 16), (2, 1), (2, 2), (2, 4), (2, 8), (2, 16), (3, 1), (3, 2), (3, 4), (3, 8), (3, 16), (4, 1), (4, 2), (4, 4), (4, 8), (4, 16), (5, 1), (5, 2), (5, 8), (6, 1), (6, 2), (6, 8), (6, 16), (7, 1), (7, 2), (7, 4), (7, 8), (7, 16), (8, 1), (8, 2), (8, 4), (8, 8), (8, 16), (9, 1), (9, 2), (9, 6), (9, 8), (10, 1), (10, 2), (10, 8), (10, 16), (10, 19), (11, 1), (11, 2), (11, 8), (11, 16), (12, 1), (12, 2), (12, 8), (12, 16), (13, 1), (13, 2), (13, 8), (13, 16), (14, 2), (14, 8), (14, 16), (14, 19), (15, 1), (15, 2), (15, 8), (15, 16), (16, 1), (16, 2), (16, 8), (16, 16))
group by zones,all_tech;" :[zones,all_tech] cost_fuel;

#Retrieve fuel heat rates for default technologies
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cap.ntndp_zone_id AS zones, cap.technology_type_id AS all_tech, avg(heat.heat_rate) as fuel_heat_rate
FROM heat_rates heat
INNER JOIN capacity cap ON cap.id=heat.capacity_id
AND (cap.ntndp_zone_id,cap.technology_type_id) in
((1, 1), (1, 2), (1, 4), (1, 8), (1, 16), (2, 1), (2, 2), (2, 4), (2, 8), (2, 16), (3, 1), (3, 2), (3, 4), (3, 8), (3, 16), (4, 1), (4, 2), (4, 4), (4, 8), (4, 16), (5, 1), (5, 2), (5, 8), (6, 1), (6, 2), (6, 8), (6, 16), (7, 1), (7, 2), (7, 4), (7, 8), (7, 16), (8, 1), (8, 2), (8, 4), (8, 8), (8, 16), (9, 1), (9, 2), (9, 6), (9, 8), (10, 1), (10, 2), (10, 8), (10, 16), (10, 19), (11, 1), (11, 2), (11, 8), (11, 16), (12, 1), (12, 2), (12, 8), (12, 16), (13, 1), (13, 2), (13, 8), (13, 16), (14, 2), (14, 8), (14, 16), (14, 19), (15, 1), (15, 2), (15, 8), (15, 16), (16, 1), (16, 2), (16, 8), (16, 16))
group by zones,all_tech;" :[zones,all_tech] fuel_heat_rate;

#Ordered set of timestams to retrieve traces for dispatch calculations
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
format=set
query="SELECT DISTINCT cast(timestamp AS CHAR)
FROM demand_and_rooftop_traces
WHERE timestamp BETWEEN '2029-07-01 00:00:00' AND '2029-07-12 23:00:00'
AND MINUTE(timestamp)=0;" :t;

# Build costs for gentech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_gen_build
FROM capex
WHERE year=2030
AND (demand_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(demand_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE demand_scenario_id IN (3,1)
  AND (ntndp_zone_id, technology_type_id) IN
  ((1, 1), (1, 2), (1, 4), (1, 8), (1, 11), (1, 12), (1, 16), (1, 18), (2, 1), (2, 2), (2, 4), (2, 8), (2, 11), (2, 12), (2, 16), (3, 1), (3, 2), (3, 4), (3, 8), (3, 11), (3, 12), (3, 16), (4, 1), (4, 2), (4, 4), (4, 8), (4, 11), (4, 16), (5, 1), (5, 2), (5, 8), (5, 10), (5, 11), (5, 12), (5, 18), (6, 1), (6, 2), (6, 8), (6, 10), (6, 12), (6, 16), (7, 1), (7, 2), (7, 4), (7, 8), (7, 10), (7, 11), (7, 12), (7, 16), (8, 1), (8, 2), (8, 4), (8, 8), (8, 11), (8, 12), (8, 16), (9, 1), (9, 2), (9, 6), (9, 8), (9, 12), (10, 1), (10, 2), (10, 8), (10, 12), (10, 16), (10, 19), (11, 1), (11, 2), (11, 8), (11, 11), (11, 12), (11, 16), (12, 1), (12, 2), (12, 8), (12, 11), (12, 12), (12, 16), (12, 18), (13, 1), (13, 2), (13, 8), (13, 11), (13, 12), (13, 16), (14, 2), (14, 8), (14, 12), (14, 16), (14, 19), (15, 1), (15, 2), (15, 8), (15, 12), (15, 16), (16, 1), (16, 2), (16, 8), (16, 12), (16, 16), (16, 18))
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_gen_build;

# Build costs for stortech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_stor_build
FROM capex
WHERE year=2030
AND (demand_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(demand_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE demand_scenario_id IN (3,1)
  AND (ntndp_zone_id, technology_type_id) IN
  ((1, 14), (1, 15), (2, 14), (2, 15), (3, 14), (3, 15), (5, 14), (5, 15), (5, 21), (6, 14), (6, 15), (7, 14), (7, 15), (8, 14), (8, 15), (9, 14), (9, 15), (10, 14), (10, 15), (11, 14), (11, 15), (12, 14), (12, 15), (13, 14), (13, 15), (15, 14), (15, 15), (16, 14), (16, 15))
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_stor_build;

# Build costs for hybtech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_hyb_build
FROM capex
WHERE year=2030
AND (demand_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(demand_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE demand_scenario_id IN (3,1)
  AND (ntndp_zone_id, technology_type_id) IN
  ((1, 13), (2, 13), (3, 13), (5, 13), (7, 13), (8, 13), (13, 13))
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_hyb_build;

# FOM VOM costs for gentech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT technology_type_id AS all_tech, 1000*fom AS cost_gen_fom, vom AS cost_gen_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20) GROUP BY technology_type_id);": [all_tech] cost_gen_fom cost_gen_vom;

# FOM VOM costs for stortech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT technology_type_id AS all_tech, 1000*fom AS cost_stor_fom, vom AS cost_stor_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in (14, 15, 21) GROUP BY technology_type_id);": [all_tech] cost_stor_fom cost_stor_vom;

# FOM VOM costs for hybtech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT technology_type_id AS all_tech, 1000*fom AS cost_hyb_fom, vom AS cost_hyb_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in (13) GROUP BY technology_type_id);": [all_tech] cost_hyb_fom cost_hyb_vom;

#Starting capacity (either cfrom capacity table or carry forward from previous)
load 'tests/Sample/gen_cap_op2025.json' : [zones,all_tech] gen_cap_initial stor_cap_initial hyb_cap_initial intercon_cap_initial;

#Load carry_forward costs from openCEM_cap_hist
load "cemo/openCEM_cap_hist.db" using=sqlite3
query="SELECT ntndp_zone_id as zone, sum(annualised_capex) as cost_cap_carry_forward_hist
FROM NEM_fleet
WHERE zone in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
AND commissioning_year < 2018
AND years_to_EOL_2020-(2030-2020)>0
group by ntndp_zone_id": [zone] cost_cap_carry_forward_hist;

# Exogenously commissioned capacity
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as gen_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
((1, 1), (1, 2), (1, 4), (1, 8), (1, 11), (1, 12), (1, 16), (1, 18), (2, 1), (2, 2), (2, 4), (2, 8), (2, 11), (2, 12), (2, 16), (3, 1), (3, 2), (3, 4), (3, 8), (3, 11), (3, 12), (3, 16), (4, 1), (4, 2), (4, 4), (4, 8), (4, 11), (4, 16), (5, 1), (5, 2), (5, 8), (5, 10), (5, 11), (5, 12), (5, 18), (6, 1), (6, 2), (6, 8), (6, 10), (6, 12), (6, 16), (7, 1), (7, 2), (7, 4), (7, 8), (7, 10), (7, 11), (7, 12), (7, 16), (8, 1), (8, 2), (8, 4), (8, 8), (8, 11), (8, 12), (8, 16), (9, 1), (9, 2), (9, 6), (9, 8), (9, 12), (10, 1), (10, 2), (10, 8), (10, 12), (10, 16), (10, 19), (11, 1), (11, 2), (11, 8), (11, 11), (11, 12), (11, 16), (12, 1), (12, 2), (12, 8), (12, 11), (12, 12), (12, 16), (12, 18), (13, 1), (13, 2), (13, 8), (13, 11), (13, 12), (13, 16), (14, 2), (14, 8), (14, 12), (14, 16), (14, 19), (15, 1), (15, 2), (15, 8), (15, 12), (15, 16), (16, 1), (16, 2), (16, 8), (16, 12), (16, 16), (16, 18)) and commissioning_year >2025 and commissioning_year<=2030
group by zones,all_tech;" : [zones,all_tech] gen_cap_exo;

load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as stor_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
((1, 14), (1, 15), (2, 14), (2, 15), (3, 14), (3, 15), (5, 14), (5, 15), (5, 21), (6, 14), (6, 15), (7, 14), (7, 15), (8, 14), (8, 15), (9, 14), (9, 15), (10, 14), (10, 15), (11, 14), (11, 15), (12, 14), (12, 15), (13, 14), (13, 15), (15, 14), (15, 15), (16, 14), (16, 15)) and commissioning_year >2025 and commissioning_year<=2030
group by zones,all_tech;" : [zones,all_tech] stor_cap_exo;

load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as hyb_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
((1, 13), (2, 13), (3, 13), (5, 13), (7, 13), (8, 13), (13, 13)) and commissioning_year >2025 and commissioning_year<=2030
group by zones,all_tech;" : [zones,all_tech] hyb_cap_exo;


# Exogenously retired capacity
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as ret_gen_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
((1, 2), (1, 4), (1, 8), (1, 16), (2, 2), (2, 4), (2, 8), (2, 16), (3, 2), (3, 4), (3, 8), (3, 16), (4, 2), (4, 4), (4, 8), (4, 16), (5, 2), (5, 8), (6, 2), (6, 8), (6, 16), (7, 2), (7, 4), (7, 8), (7, 16), (8, 2), (8, 4), (8, 8), (8, 16), (9, 2), (9, 6), (9, 8), (10, 2), (10, 8), (10, 16), (10, 19), (11, 2), (11, 8), (11, 16), (12, 2), (12, 8), (12, 16), (13, 2), (13, 8), (13, 16), (14, 2), (14, 8), (14, 16), (14, 19), (15, 2), (15, 8), (15, 16), (16, 2), (16, 8), (16, 16)) and retirement_year >2025 and retirement_year<=2030
group by zones,all_tech;" : [zones,all_tech] ret_gen_cap_exo;

#capacity factors for technologies with traces
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT t1.ntndp_zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(mw) AS gen_cap_factor, t1.source_id
FROM wind_and_solar_traces t1
INNER JOIN (SELECT max(source_id) as source_id, ntndp_zone_id, technology_type_id, timestamp
            FROM wind_and_solar_traces
            WHERE timestamp BETWEEN '2029-07-01 00:00:00' AND '2029-07-12 23:00:00'
                AND MINUTE(timestamp)=0
                AND (ntndp_zone_id, technology_type_id) IN ((1, 1), (1, 2), (1, 4), (1, 8), (1, 11), (1, 12), (1, 16), (1, 18), (2, 1), (2, 2), (2, 4), (2, 8), (2, 11), (2, 12), (2, 16), (3, 1), (3, 2), (3, 4), (3, 8), (3, 11), (3, 12), (3, 16), (4, 1), (4, 2), (4, 4), (4, 8), (4, 11), (4, 16), (5, 1), (5, 2), (5, 8), (5, 10), (5, 11), (5, 12), (5, 18), (6, 1), (6, 2), (6, 8), (6, 10), (6, 12), (6, 16), (7, 1), (7, 2), (7, 4), (7, 8), (7, 10), (7, 11), (7, 12), (7, 16), (8, 1), (8, 2), (8, 4), (8, 8), (8, 11), (8, 12), (8, 16), (9, 1), (9, 2), (9, 6), (9, 8), (9, 12), (10, 1), (10, 2), (10, 8), (10, 12), (10, 16), (10, 19), (11, 1), (11, 2), (11, 8), (11, 11), (11, 12), (11, 16), (12, 1), (12, 2), (12, 8), (12, 11), (12, 12), (12, 16), (12, 18), (13, 1), (13, 2), (13, 8), (13, 11), (13, 12), (13, 16), (14, 2), (14, 8), (14, 12), (14, 16), (14, 19), (15, 1), (15, 2), (15, 8), (15, 12), (15, 16), (16, 1), (16, 2), (16, 8), (16, 12), (16, 16), (16, 18))
            GROUP BY ntndp_zone_id, technology_type_id, timestamp) as t2
    on t1.ntndp_zone_id = t2.ntndp_zone_id
       AND t1.technology_type_id = t2.technology_type_id
       AND t1.timestamp = t2.timestamp
       AND t1.source_id = t2.source_id
GROUP BY t1.ntndp_zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] gen_cap_factor;

load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT t1.ntndp_zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(mw) AS hyb_cap_factor, t1.source_id
FROM wind_and_solar_traces t1
INNER JOIN (SELECT max(source_id) as source_id, ntndp_zone_id, technology_type_id, timestamp
            FROM wind_and_solar_traces
            WHERE timestamp BETWEEN '2029-07-01 00:00:00' AND '2029-07-12 23:00:00'
                AND MINUTE(timestamp)=0
                AND (ntndp_zone_id, technology_type_id) IN ((1, 13), (2, 13), (3, 13), (5, 13), (7, 13), (8, 13), (13, 13))
            GROUP BY ntndp_zone_id, technology_type_id, timestamp) as t2
    on t1.ntndp_zone_id = t2.ntndp_zone_id
       AND t1.technology_type_id = t2.technology_type_id
       AND t1.timestamp = t2.timestamp
       AND t1.source_id = t2.source_id
GROUP BY t1.ntndp_zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] hyb_cap_factor;

#Demand for for all regions for the given time interval
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cast(poe.timestamp AS CHAR) AS t, poe.region_id AS regions, (poe.poe10 -0*roof.rooftop_solar) AS region_net_demand
FROM demand_and_rooftop_traces poe
INNER JOIN (SELECT timestamp, region_id, rooftop_solar FROM demand_and_rooftop_traces
WHERE timestamp BETWEEN '2029-07-01 00:00:00' AND '2029-07-12 23:00:00'
AND MINUTE(timestamp)=0
AND demand_scenario_id =3) roof
ON poe.timestamp = roof.timestamp AND poe.region_id = roof.region_id
AND poe.demand_scenario_id =3
AND poe.region_id in (SELECT id FROM region WHERE text_id in ('NSW','SA','QLD','VIC','TAS'))
order BY regions,t;": [regions,t] region_net_demand;



#Discount rate for project
param all_tech_discount_rate := 0.06;
#Cost of emissions $/Mhw
param cost_emit:= 0.025;
#Carry forward annualised capital costs
load 'tests/Sample/gen_cap_op2025.json' : cost_cap_carry_forward_sim;

 # NEM wide RET
param nem_ret_ratio :=0.3;

 # NEM wide RET
param nem_ret_gwh :=42343;

 #Regional based RET
param region_ret_ratio := 1 0 2 0 3 0 4 0 5 0.5;

 #NEM wide emission limit (in GT)
param nem_year_emit_limit := 100;

 #NEM wide minimum generation ratio from dispatchable tech
param nem_re_disp_ratio := 0;

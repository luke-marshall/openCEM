# NEM ISP template scenario
set regions :=
1 2 3 4 5;

set zones :=
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16;

set all_tech :=
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 22 23 24 25 26 27 28;
# Set of generator technologies available in each zone
set gen_tech_in_zones :=
1 1
1 2
1 4
1 28
1 8
1 11
1 12
1 16
1 17
1 18
2 1
2 2
2 4
2 28
2 8
2 11
2 12
2 16
2 17
3 1
3 2
3 4
3 28
3 8
3 11
3 12
3 16
3 17
4 1
4 2
4 4
4 28
4 8
4 11
4 16
5 1
5 2
5 8
5 10
5 11
5 12
5 17
5 18
6 1
6 2
6 8
6 10
6 12
6 16
6 17
7 1
7 2
7 4
7 8
7 10
7 11
7 12
7 16
7 17
8 1
8 2
8 4
8 8
8 28
8 11
8 12
8 16
8 17
9 1
9 2
9 6
9 8
9 12
9 17
10 1
10 2
10 8
10 12
10 16
10 17
10 19
11 1
11 2
11 8
11 11
11 12
11 16
11 17
12 1
12 2
12 8
12 12
12 16
12 17
12 18
13 1
13 2
13 8
13 11
13 12
13 16
13 17
14 2
14 8
14 12
14 16
14 17
14 19
15 1
15 2
15 8
15 12
15 16
15 17
16 1
16 2
16 8
16 12
16 16
16 17
16 18
;

# Set of generator technologies that can be retired by the model
set retire_gen_tech_in_zones :=
1 2
1 4
1 8
1 16
2 2
2 4
2 8
2 16
3 2
3 4
3 8
3 16
4 2
4 4
4 8
4 16
5 2
5 8
6 2
6 8
6 16
7 2
7 4
7 8
7 16
8 2
8 4
8 8
8 16
9 2
9 6
9 8
10 2
10 8
10 16
10 19
11 2
11 8
11 16
12 2
12 8
12 16
13 2
13 8
13 16
14 2
14 8
14 16
14 19
15 2
15 8
15 16
16 2
16 8
16 16
;

# Set of emitting/fuel generator technologies
set fuel_gen_tech_in_zones :=
1 1
1 2
1 4
1 28
1 8
1 16
2 1
2 2
2 4
2 28
2 8
2 16
3 1
3 2
3 4
3 28
3 8
3 16
4 1
4 2
4 4
4 28
4 8
4 16
5 1
5 2
5 8
6 1
6 2
6 8
6 16
7 1
7 2
7 4
7 8
7 16
8 1
8 2
8 4
8 8
8 28
8 16
9 1
9 2
9 6
9 8
10 1
10 2
10 8
10 16
10 19
11 1
11 2
11 8
11 16
12 1
12 2
12 8
12 16
13 1
13 2
13 8
13 16
14 2
14 8
14 16
14 19
15 1
15 2
15 8
15 16
16 1
16 2
16 8
16 16
;

# Set of emitting/fuel generator technologies
set commit_gen_tech_in_zones :=
1 2
1 4
1 28
2 2
2 4
2 28
3 2
3 4
3 28
4 2
4 4
4 28
5 2
6 2
7 2
7 4
8 2
8 4
8 28
9 2
9 6
10 2
10 19
11 2
12 2
13 2
14 2
14 19
15 2
16 2
;

# Set of renewable energy generator technologies
set re_gen_tech_in_zones :=
1 1
1 11
1 12
1 17
1 18
2 1
2 11
2 12
2 17
3 1
3 11
3 12
3 17
4 1
4 11
5 1
5 10
5 11
5 12
5 17
5 18
6 1
6 10
6 12
6 17
7 1
7 10
7 11
7 12
7 17
8 1
8 11
8 12
8 17
9 1
9 12
9 17
10 1
10 12
10 17
11 1
11 11
11 12
11 17
12 1
12 12
12 17
12 18
13 1
13 11
13 12
13 17
14 12
14 17
15 1
15 12
15 17
16 1
16 12
16 17
16 18
;

# Set of dispatchable generators
set disp_gen_tech_in_zones :=
1 1
1 2
1 4
1 28
1 8
1 16
1 18
2 1
2 2
2 4
2 28
2 8
2 16
3 1
3 2
3 4
3 28
3 8
3 16
4 1
4 2
4 4
4 28
4 8
4 16
5 1
5 2
5 8
5 18
6 1
6 2
6 8
6 16
7 1
7 2
7 4
7 8
7 16
8 1
8 2
8 4
8 8
8 28
8 16
9 1
9 2
9 6
9 8
10 1
10 2
10 8
10 16
10 19
11 1
11 2
11 8
11 16
12 1
12 2
12 8
12 16
12 18
13 1
13 2
13 8
13 16
14 2
14 8
14 16
14 19
15 1
15 2
15 8
15 16
16 1
16 2
16 8
16 16
16 18
;

# Set of dispatchable generators
set re_disp_gen_tech_in_zones :=
1 1
1 18
2 1
3 1
4 1
5 1
5 18
6 1
7 1
8 1
9 1
10 1
11 1
12 1
12 18
13 1
15 1
16 1
16 18
;

#Set of storage technologies in each zones
set stor_tech_in_zones :=
1 14
1 24
1 25
1 15
1 26
1 27
2 14
2 24
2 25
2 15
2 26
2 27
3 14
3 24
3 25
3 15
3 26
3 27
5 14
5 24
5 25
5 15
5 26
5 27
6 14
6 24
6 25
6 15
6 26
6 27
7 14
7 24
7 25
7 15
7 26
7 27
8 14
8 24
8 25
8 15
8 26
8 27
9 14
9 24
9 25
9 15
9 26
9 27
10 14
10 24
10 25
10 15
10 26
10 27
11 14
11 24
11 25
11 15
11 26
11 27
12 14
12 24
12 25
12 15
12 26
12 27
13 14
13 24
13 25
13 15
13 26
13 27
15 14
15 24
15 25
15 15
15 26
15 27
16 14
16 24
16 25
16 15
16 26
16 27
;

# Set of hybrid technologies available in each zone
set hyb_tech_in_zones :=
1 13
1 22
1 23
2 13
2 22
2 23
3 13
3 22
3 23
5 13
5 22
5 23
7 13
7 22
7 23
8 13
8 22
8 23
11 13
11 22
11 23
13 13
13 22
13 23
;

#Retrieve fuel costs for defined technologies
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cap.ntndp_zone_id AS zones, cap.technology_type_id AS all_tech, avg(fuel.price) as cost_fuel
FROM fuel_price fuel
INNER JOIN capacity cap ON cap.id=fuel.capacity_id
WHERE fuel.year=2035 AND fuel.fuel_scenario_id =3
AND (cap.ntndp_zone_id,cap.technology_type_id) in
((1, 1), (1, 2), (1, 4), (1, 28), (1, 8), (1, 16), (2, 1), (2, 2), (2, 4), (2, 28), (2, 8), (2, 16), (3, 1), (3, 2), (3, 4), (3, 28), (3, 8), (3, 16), (4, 1), (4, 2), (4, 4), (4, 28), (4, 8), (4, 16), (5, 1), (5, 2), (5, 8), (6, 1), (6, 2), (6, 8), (6, 16), (7, 1), (7, 2), (7, 4), (7, 8), (7, 16), (8, 1), (8, 2), (8, 4), (8, 8), (8, 28), (8, 16), (9, 1), (9, 2), (9, 6), (9, 8), (10, 1), (10, 2), (10, 8), (10, 16), (10, 19), (11, 1), (11, 2), (11, 8), (11, 16), (12, 1), (12, 2), (12, 8), (12, 16), (13, 1), (13, 2), (13, 8), (13, 16), (14, 2), (14, 8), (14, 16), (14, 19), (15, 1), (15, 2), (15, 8), (15, 16), (16, 1), (16, 2), (16, 8), (16, 16))
group by zones,all_tech;" :[zones,all_tech] cost_fuel;

#Retrieve fuel heat rates for default technologies
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cap.ntndp_zone_id AS zones, cap.technology_type_id AS all_tech, avg(heat.heat_rate) as fuel_heat_rate
FROM heat_rates heat
INNER JOIN capacity cap ON cap.id=heat.capacity_id
AND (cap.ntndp_zone_id,cap.technology_type_id) in
((1, 1), (1, 2), (1, 4), (1, 28), (1, 8), (1, 16), (2, 1), (2, 2), (2, 4), (2, 28), (2, 8), (2, 16), (3, 1), (3, 2), (3, 4), (3, 28), (3, 8), (3, 16), (4, 1), (4, 2), (4, 4), (4, 28), (4, 8), (4, 16), (5, 1), (5, 2), (5, 8), (6, 1), (6, 2), (6, 8), (6, 16), (7, 1), (7, 2), (7, 4), (7, 8), (7, 16), (8, 1), (8, 2), (8, 4), (8, 8), (8, 28), (8, 16), (9, 1), (9, 2), (9, 6), (9, 8), (10, 1), (10, 2), (10, 8), (10, 16), (10, 19), (11, 1), (11, 2), (11, 8), (11, 16), (12, 1), (12, 2), (12, 8), (12, 16), (13, 1), (13, 2), (13, 8), (13, 16), (14, 2), (14, 8), (14, 16), (14, 19), (15, 1), (15, 2), (15, 8), (15, 16), (16, 1), (16, 2), (16, 8), (16, 16))
group by zones,all_tech;" :[zones,all_tech] fuel_heat_rate;

#Ordered set of timestams to retrieve traces for dispatch calculations
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
format=set
query="SELECT DISTINCT cast(timestamp AS CHAR)
FROM demand_and_rooftop_traces
WHERE timestamp BETWEEN '2034-07-01 00:00:00' AND '2035-06-30 23:00:00'
AND MINUTE(timestamp)=0;" :t;

# Build costs for gentech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_gen_build
FROM capex
WHERE year=2035
AND (demand_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(demand_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE demand_scenario_id IN (3,1)
  AND (ntndp_zone_id, technology_type_id) IN
  ((1, 1), (1, 2), (1, 4), (1, 28), (1, 8), (1, 11), (1, 12), (1, 16), (1, 17), (1, 18), (2, 1), (2, 2), (2, 4), (2, 28), (2, 8), (2, 11), (2, 12), (2, 16), (2, 17), (3, 1), (3, 2), (3, 4), (3, 28), (3, 8), (3, 11), (3, 12), (3, 16), (3, 17), (4, 1), (4, 2), (4, 4), (4, 28), (4, 8), (4, 11), (4, 16), (5, 1), (5, 2), (5, 8), (5, 10), (5, 11), (5, 12), (5, 17), (5, 18), (6, 1), (6, 2), (6, 8), (6, 10), (6, 12), (6, 16), (6, 17), (7, 1), (7, 2), (7, 4), (7, 8), (7, 10), (7, 11), (7, 12), (7, 16), (7, 17), (8, 1), (8, 2), (8, 4), (8, 8), (8, 28), (8, 11), (8, 12), (8, 16), (8, 17), (9, 1), (9, 2), (9, 6), (9, 8), (9, 12), (9, 17), (10, 1), (10, 2), (10, 8), (10, 12), (10, 16), (10, 17), (10, 19), (11, 1), (11, 2), (11, 8), (11, 11), (11, 12), (11, 16), (11, 17), (12, 1), (12, 2), (12, 8), (12, 12), (12, 16), (12, 17), (12, 18), (13, 1), (13, 2), (13, 8), (13, 11), (13, 12), (13, 16), (13, 17), (14, 2), (14, 8), (14, 12), (14, 16), (14, 17), (14, 19), (15, 1), (15, 2), (15, 8), (15, 12), (15, 16), (15, 17), (16, 1), (16, 2), (16, 8), (16, 12), (16, 16), (16, 17), (16, 18))
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_gen_build;

# Build costs for stortech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_stor_build
FROM capex
WHERE year=2035
AND (demand_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(demand_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE demand_scenario_id IN (3,1)
  AND (ntndp_zone_id, technology_type_id) IN
  ((1, 14), (1, 24), (1, 25), (1, 15), (1, 26), (1, 27), (2, 14), (2, 24), (2, 25), (2, 15), (2, 26), (2, 27), (3, 14), (3, 24), (3, 25), (3, 15), (3, 26), (3, 27), (5, 14), (5, 24), (5, 25), (5, 15), (5, 26), (5, 27), (6, 14), (6, 24), (6, 25), (6, 15), (6, 26), (6, 27), (7, 14), (7, 24), (7, 25), (7, 15), (7, 26), (7, 27), (8, 14), (8, 24), (8, 25), (8, 15), (8, 26), (8, 27), (9, 14), (9, 24), (9, 25), (9, 15), (9, 26), (9, 27), (10, 14), (10, 24), (10, 25), (10, 15), (10, 26), (10, 27), (11, 14), (11, 24), (11, 25), (11, 15), (11, 26), (11, 27), (12, 14), (12, 24), (12, 25), (12, 15), (12, 26), (12, 27), (13, 14), (13, 24), (13, 25), (13, 15), (13, 26), (13, 27), (15, 14), (15, 24), (15, 25), (15, 15), (15, 26), (15, 27), (16, 14), (16, 24), (16, 25), (16, 15), (16, 26), (16, 27))
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_stor_build;

# Build costs for hybtech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT ntndp_zone_id AS zones,technology_type_id AS all_tech,
1000*capex AS cost_hyb_build
FROM capex
WHERE year=2035
AND (demand_scenario_id,ntndp_zone_id, technology_type_id) in (
  SELECT MAX(demand_scenario_id), ntndp_zone_id, technology_type_id
  FROM capex
  WHERE demand_scenario_id IN (3,1)
  AND (ntndp_zone_id, technology_type_id) IN
  ((1, 13), (1, 22), (1, 23), (2, 13), (2, 22), (2, 23), (3, 13), (3, 22), (3, 23), (5, 13), (5, 22), (5, 23), (7, 13), (7, 22), (7, 23), (8, 13), (8, 22), (8, 23), (11, 13), (11, 22), (11, 23), (13, 13), (13, 22), (13, 23))
  GROUP BY ntndp_zone_id,technology_type_id
  );": [zones,all_tech] cost_hyb_build;

# FOM VOM costs for gentech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT technology_type_id AS all_tech, 1000*fom AS cost_gen_fom, vom AS cost_gen_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 28) GROUP BY technology_type_id);": [all_tech] cost_gen_fom cost_gen_vom;

# FOM VOM costs for stortech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT technology_type_id AS all_tech, 1000*fom AS cost_stor_fom, vom AS cost_stor_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in (14, 15, 24, 25, 26, 27) GROUP BY technology_type_id);": [all_tech] cost_stor_fom cost_stor_vom;

# FOM VOM costs for hybtech
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT technology_type_id AS all_tech, 1000*fom AS cost_hyb_fom, vom AS cost_hyb_vom
FROM opex WHERE (source_id, technology_type_id) in
  (SELECT MAX(source_id),technology_type_id
   FROM opex where technology_type_id in (13, 22, 23) GROUP BY technology_type_id);": [all_tech] cost_hyb_fom cost_hyb_vom;

#Starting capacity (either cfrom capacity table or carry forward from previous)
load 'examples/scenario05/scenario05/gen_cap_op2030.json' : [zones,all_tech] gen_cap_initial stor_cap_initial hyb_cap_initial intercon_cap_initial;

#Load carry_forward costs from openCEM_cap_hist
load "cemo/openCEM_cap_hist.db" using=sqlite3
query="SELECT ntndp_zone_id as zone, sum(annualised_capex) as cost_cap_carry_forward_hist
FROM NEM_fleet
WHERE zone in (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16)
AND commissioning_year < 2018
AND years_to_EOL_2020-(2035-2020)>0
group by ntndp_zone_id": [zone] cost_cap_carry_forward_hist;

# Exogenously commissioned capacity
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as gen_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
((1, 1), (1, 2), (1, 4), (1, 28), (1, 8), (1, 11), (1, 12), (1, 16), (1, 17), (1, 18), (2, 1), (2, 2), (2, 4), (2, 28), (2, 8), (2, 11), (2, 12), (2, 16), (2, 17), (3, 1), (3, 2), (3, 4), (3, 28), (3, 8), (3, 11), (3, 12), (3, 16), (3, 17), (4, 1), (4, 2), (4, 4), (4, 28), (4, 8), (4, 11), (4, 16), (5, 1), (5, 2), (5, 8), (5, 10), (5, 11), (5, 12), (5, 17), (5, 18), (6, 1), (6, 2), (6, 8), (6, 10), (6, 12), (6, 16), (6, 17), (7, 1), (7, 2), (7, 4), (7, 8), (7, 10), (7, 11), (7, 12), (7, 16), (7, 17), (8, 1), (8, 2), (8, 4), (8, 8), (8, 28), (8, 11), (8, 12), (8, 16), (8, 17), (9, 1), (9, 2), (9, 6), (9, 8), (9, 12), (9, 17), (10, 1), (10, 2), (10, 8), (10, 12), (10, 16), (10, 17), (10, 19), (11, 1), (11, 2), (11, 8), (11, 11), (11, 12), (11, 16), (11, 17), (12, 1), (12, 2), (12, 8), (12, 12), (12, 16), (12, 17), (12, 18), (13, 1), (13, 2), (13, 8), (13, 11), (13, 12), (13, 16), (13, 17), (14, 2), (14, 8), (14, 12), (14, 16), (14, 17), (14, 19), (15, 1), (15, 2), (15, 8), (15, 12), (15, 16), (15, 17), (16, 1), (16, 2), (16, 8), (16, 12), (16, 16), (16, 17), (16, 18)) and commissioning_year >2030 and commissioning_year<=2035
group by zones,all_tech;" : [zones,all_tech] gen_cap_exo;

load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as stor_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
((1, 14), (1, 24), (1, 25), (1, 15), (1, 26), (1, 27), (2, 14), (2, 24), (2, 25), (2, 15), (2, 26), (2, 27), (3, 14), (3, 24), (3, 25), (3, 15), (3, 26), (3, 27), (5, 14), (5, 24), (5, 25), (5, 15), (5, 26), (5, 27), (6, 14), (6, 24), (6, 25), (6, 15), (6, 26), (6, 27), (7, 14), (7, 24), (7, 25), (7, 15), (7, 26), (7, 27), (8, 14), (8, 24), (8, 25), (8, 15), (8, 26), (8, 27), (9, 14), (9, 24), (9, 25), (9, 15), (9, 26), (9, 27), (10, 14), (10, 24), (10, 25), (10, 15), (10, 26), (10, 27), (11, 14), (11, 24), (11, 25), (11, 15), (11, 26), (11, 27), (12, 14), (12, 24), (12, 25), (12, 15), (12, 26), (12, 27), (13, 14), (13, 24), (13, 25), (13, 15), (13, 26), (13, 27), (15, 14), (15, 24), (15, 25), (15, 15), (15, 26), (15, 27), (16, 14), (16, 24), (16, 25), (16, 15), (16, 26), (16, 27)) and commissioning_year >2030 and commissioning_year<=2035
group by zones,all_tech;" : [zones,all_tech] stor_cap_exo;

load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as hyb_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
((1, 13), (1, 22), (1, 23), (2, 13), (2, 22), (2, 23), (3, 13), (3, 22), (3, 23), (5, 13), (5, 22), (5, 23), (7, 13), (7, 22), (7, 23), (8, 13), (8, 22), (8, 23), (11, 13), (11, 22), (11, 23), (13, 13), (13, 22), (13, 23)) and commissioning_year >2030 and commissioning_year<=2035
group by zones,all_tech;" : [zones,all_tech] hyb_cap_exo;


# Exogenously retired capacity
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="select ntndp_zone_id as zones, technology_type_id as all_tech, sum(reg_cap) as ret_gen_cap_exo
from capacity
where (ntndp_zone_id,technology_type_id) in
((1, 2), (1, 4), (1, 8), (1, 16), (2, 2), (2, 4), (2, 8), (2, 16), (3, 2), (3, 4), (3, 8), (3, 16), (4, 2), (4, 4), (4, 8), (4, 16), (5, 2), (5, 8), (6, 2), (6, 8), (6, 16), (7, 2), (7, 4), (7, 8), (7, 16), (8, 2), (8, 4), (8, 8), (8, 16), (9, 2), (9, 6), (9, 8), (10, 2), (10, 8), (10, 16), (10, 19), (11, 2), (11, 8), (11, 16), (12, 2), (12, 8), (12, 16), (13, 2), (13, 8), (13, 16), (14, 2), (14, 8), (14, 16), (14, 19), (15, 2), (15, 8), (15, 16), (16, 2), (16, 8), (16, 16)) and retirement_year >2030 and retirement_year<=2035
group by zones,all_tech;" : [zones,all_tech] ret_gen_cap_exo;

#capacity factors for technologies with traces
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="
SELECT t1.ntndp_zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(mw) AS gen_cap_factor, t1.source_id
FROM wind_and_solar_traces t1
INNER JOIN (SELECT max(source_id) as source_id, ntndp_zone_id, technology_type_id, timestamp
            FROM wind_and_solar_traces
            WHERE timestamp BETWEEN '2034-07-01 00:00:00' AND '2035-06-30 23:00:00'
                AND MINUTE(timestamp)=0
                AND (ntndp_zone_id, technology_type_id) IN ((1, 1), (1, 2), (1, 4), (1, 28), (1, 8), (1, 11), (1, 12), (1, 16), (1, 17), (1, 18), (2, 1), (2, 2), (2, 4), (2, 28), (2, 8), (2, 11), (2, 12), (2, 16), (2, 17), (3, 1), (3, 2), (3, 4), (3, 28), (3, 8), (3, 11), (3, 12), (3, 16), (3, 17), (4, 1), (4, 2), (4, 4), (4, 28), (4, 8), (4, 11), (4, 16), (5, 1), (5, 2), (5, 8), (5, 10), (5, 11), (5, 12), (5, 17), (5, 18), (6, 1), (6, 2), (6, 8), (6, 10), (6, 12), (6, 16), (6, 17), (7, 1), (7, 2), (7, 4), (7, 8), (7, 10), (7, 11), (7, 12), (7, 16), (7, 17), (8, 1), (8, 2), (8, 4), (8, 8), (8, 28), (8, 11), (8, 12), (8, 16), (8, 17), (9, 1), (9, 2), (9, 6), (9, 8), (9, 12), (9, 17), (10, 1), (10, 2), (10, 8), (10, 12), (10, 16), (10, 17), (10, 19), (11, 1), (11, 2), (11, 8), (11, 11), (11, 12), (11, 16), (11, 17), (12, 1), (12, 2), (12, 8), (12, 12), (12, 16), (12, 17), (12, 18), (13, 1), (13, 2), (13, 8), (13, 11), (13, 12), (13, 16), (13, 17), (14, 2), (14, 8), (14, 12), (14, 16), (14, 17), (14, 19), (15, 1), (15, 2), (15, 8), (15, 12), (15, 16), (15, 17), (16, 1), (16, 2), (16, 8), (16, 12), (16, 16), (16, 17), (16, 18))
            GROUP BY ntndp_zone_id, technology_type_id, timestamp) as t2
    on t1.ntndp_zone_id = t2.ntndp_zone_id
       AND t1.technology_type_id = t2.technology_type_id
       AND t1.timestamp = t2.timestamp
       AND t1.source_id = t2.source_id
GROUP BY t1.ntndp_zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] gen_cap_factor;

# Traces for hybrids
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_community
user=select password=select_password1 using=pymysql
query="
SELECT t1.ntndp_zone_id AS zones, t1.technology_type_id AS all_tech, cast(t1.timestamp AS CHAR) AS t, avg(mw) AS hyb_cap_factor, t1.source_id
FROM wind_and_solar_traces t1
INNER JOIN (SELECT max(source_id) as source_id, ntndp_zone_id, technology_type_id, timestamp
            FROM wind_and_solar_traces
            WHERE timestamp BETWEEN '2034-07-01 00:00:00' AND '2035-06-30 23:00:00'
                AND MINUTE(timestamp)=0
                AND (ntndp_zone_id, technology_type_id) IN ((1, 13), (1, 22), (1, 23), (2, 13), (2, 22), (2, 23), (3, 13), (3, 22), (3, 23), (5, 13), (5, 22), (5, 23), (7, 13), (7, 22), (7, 23), (8, 13), (8, 22), (8, 23), (11, 13), (11, 22), (11, 23), (13, 13), (13, 22), (13, 23))
            GROUP BY ntndp_zone_id, technology_type_id, timestamp) as t2
    on t1.ntndp_zone_id = t2.ntndp_zone_id
       AND t1.technology_type_id = t2.technology_type_id
       AND t1.timestamp = t2.timestamp
       AND t1.source_id = t2.source_id
GROUP BY t1.ntndp_zone_id, t1.technology_type_id, t1.timestamp;" : [zones,all_tech,t] hyb_cap_factor;

#Demand for for all regions for the given time interval
load "opencem.ckvu5hxg6w5z.ap-southeast-1.rds.amazonaws.com" database=opencem_input
user=select password=select_password1 using=pymysql
query="SELECT cast(poe.timestamp AS CHAR) AS t, poe.region_id AS regions, (poe.poe10 -0*roof.rooftop_solar) AS region_net_demand
FROM demand_and_rooftop_traces poe
INNER JOIN (SELECT timestamp, region_id, rooftop_solar FROM demand_and_rooftop_traces
WHERE timestamp BETWEEN '2034-07-01 00:00:00' AND '2035-06-30 23:00:00'
AND MINUTE(timestamp)=0
AND demand_scenario_id =3) roof
ON poe.timestamp = roof.timestamp AND poe.region_id = roof.region_id
AND poe.demand_scenario_id =3
AND poe.region_id in (SELECT id FROM region WHERE text_id in ('NSW','SA','QLD','VIC','TAS'))
order BY regions,t;": [regions,t] region_net_demand;

#Custom cost entry for cost_gen_build
param cost_gen_build:=
1 28 3369844.88
2 28 3369844.88
3 28 3369844.88
4 28 3369844.88
8 28 3369844.88
;
#Custom cost entry for cost_hyb_build
param cost_hyb_build:=
 1 22 2371385.37
 2 22 2371385.37
 3 22 2344950.08
 5 22 2371385.37
 7 22 2371385.37
 8 22 2371385.37
11 22 2362376.59
13 22 2353367.82
 1 23 3069884.67
 2 23 3069884.67
 3 23 3035662.79
 5 23 3069884.67
 7 23 3069884.67
 8 23 3069884.67
11 23 3058222.33
13 23 3046559.99
;
#Custom cost entry for cost_stor_build
param cost_stor_build:=
 1 24 1285805.16
 2 24 1285805.16
 3 24 1285805.16
 5 24 1285805.16
 6 24 1285805.16
 7 24 1285805.16
 8 24 1285805.16
 9 24 1285805.16
10 24 1285805.16
11 24 1285805.16
12 24 1285805.16
13 24 1285805.16
15 24 1285805.16
16 24 1285805.16
 1 25 1551585.96
 2 25 1551585.96
 3 25 1551585.96
 5 25 1551585.96
 6 25 1551585.96
 7 25 1551585.96
 8 25 1551585.96
 9 25 1551585.96
10 25 1551585.96
11 25 1551585.96
12 25 1551585.96
13 25 1551585.96
15 25 1551585.96
16 25 1551585.96
 1 26  594962.99
 2 26  594962.99
 3 26  594962.99
 5 26  594962.99
 6 26  594962.99
 7 26  594962.99
 8 26  594962.99
 9 26  594962.99
10 26  594962.99
11 26  594962.99
12 26  594962.99
13 26  594962.99
15 26  594962.99
16 26  594962.99
 1 27 1354290.42
 2 27 1354290.42
 3 27 1354290.42
 5 27 1354290.42
 6 27 1354290.42
 7 27 1354290.42
 8 27 1354290.42
 9 27 1354290.42
10 27 1354290.42
11 27 1354290.42
12 27 1354290.42
13 27 1354290.42
15 27 1354290.42
16 27 1354290.42
;
#Custom cost entry for cost_fuel
param cost_fuel:=
1 28       3.77
2 28       3.77
3 28       3.77
4 28       3.77
8 28       3.77
;
#Custom cost entry for cost_gen_fom
param cost_gen_fom:=
28    5373.34
;
#Custom cost entry for cost_gen_vom
param cost_gen_vom:=
28       1.03
;
#Custom cost entry for cost_hyb_fom
param cost_hyb_fom:=
22   75600.00
23   75600.00
;
#Custom cost entry for cost_hyb_vom
param cost_hyb_vom:=
22       5.99
23       5.99
;
#Custom cost entry for cost_stor_fom
param cost_stor_fom:=
24    5000.00
25    5000.00
26       0.00
27       0.00
;
#Custom cost entry for cost_stor_vom
param cost_stor_vom:=
24       5.00
25       5.00
26       0.00
27       0.00
;


#Discount rate for project
param all_tech_discount_rate := 0.06;
#Cost of emissions $/Mhw
param cost_emit:= 0.35737;
#Carry forward annualised capital costs
load 'examples/scenario05/scenario05/gen_cap_op2030.json' : cost_cap_carry_forward_sim;

 # NEM wide RET
param nem_ret_gwh :=42343;

 #Regional based RET
param region_ret_ratio := 2 0.3 5 0.4;

 #NEM wide emission limit (in GT)
param nem_year_emit_limit := 70.8;
